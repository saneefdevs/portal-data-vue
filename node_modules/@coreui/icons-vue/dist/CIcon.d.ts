import { PropType } from 'vue';
declare const CIcon: import("vue").DefineComponent<{
    /**
     * Use `:icon="..."` instead of
     *
     * @deprecated since version 3.0
     */
    content: {
        type: (StringConstructor | ArrayConstructor)[];
        default: undefined;
        required: false;
    };
    /**
     * Use for replacing default CIcon component classes. Prop is overriding the 'size' prop.
     */
    customClassName: {
        type: (StringConstructor | ArrayConstructor | ObjectConstructor)[];
        default: undefined;
        required: false;
    };
    /**
     * Name of the icon placed in React object or SVG content.
     */
    icon: {
        type: PropType<string | string[]>;
        default: undefined;
        required: false;
    };
    /**
     * Use `icon="..."` instead of
     *
     * @deprecated since version 3.0
     */
    name: {
        type: StringConstructor;
        default: undefined;
        required: false;
    };
    /**
     * Size of the icon. Available sizes: 'sm', 'lg', 'xl', 'xxl', '3xl...9xl', 'custom', 'custom-size'.
     */
    size: {
        type: StringConstructor;
        default: undefined;
        required: false;
        validator: (value: string) => boolean;
    };
    /**
     * Title tag content.
     */
    title: {
        type: StringConstructor;
        default: undefined;
        required: false;
    };
    /**
     * If defined component will be rendered using 'use' tag.
     */
    use: {
        type: StringConstructor;
        default: undefined;
        required: false;
    };
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    content?: unknown;
    customClassName?: unknown;
    icon?: unknown;
    name?: unknown;
    size?: unknown;
    title?: unknown;
    use?: unknown;
} & {} & {
    name?: string | undefined;
    content?: string | unknown[] | undefined;
    customClassName?: string | unknown[] | Record<string, any> | undefined;
    icon?: string | string[] | undefined;
    size?: string | undefined;
    title?: string | undefined;
    use?: string | undefined;
}>, {
    name: string;
    content: string | unknown[];
    customClassName: string | unknown[] | Record<string, any>;
    icon: string | string[];
    size: string;
    title: string;
    use: string;
}>;
export { CIcon };
